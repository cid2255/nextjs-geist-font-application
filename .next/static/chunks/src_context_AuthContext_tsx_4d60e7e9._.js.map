{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/AuthContext.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useState, useEffect } from 'react'\n\ninterface User {\n  id: string\n  email: string\n  name: string\n  age?: number\n  bio?: string\n  imageUrl?: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  login: (email: string, password: string) => Promise<void>\n  signup: (email: string, password: string, name: string) => Promise<void>\n  logout: () => void\n  loading: boolean\n  error: string | null\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('dating-app-user')\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser))\n      } catch (e) {\n        localStorage.removeItem('dating-app-user')\n      }\n    }\n  }, [])\n\n  const login = async (email: string, password: string) => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      // Simple validation\n      if (!email || !password) {\n        throw new Error('Email and password are required')\n      }\n      \n      if (password.length < 6) {\n        throw new Error('Password must be at least 6 characters')\n      }\n\n      // Mock user data\n      const userData: User = {\n        id: '1',\n        email,\n        name: email.split('@')[0],\n        age: 25,\n        bio: 'Hello! I\\'m new here.',\n        imageUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face'\n      }\n      \n      setUser(userData)\n      localStorage.setItem('dating-app-user', JSON.stringify(userData))\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed')\n      throw err\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signup = async (email: string, password: string, name: string) => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      // Simple validation\n      if (!email || !password || !name) {\n        throw new Error('All fields are required')\n      }\n      \n      if (password.length < 6) {\n        throw new Error('Password must be at least 6 characters')\n      }\n\n      // Mock user data\n      const userData: User = {\n        id: Date.now().toString(),\n        email,\n        name,\n        age: 25,\n        bio: 'Hello! I\\'m new here.',\n        imageUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face'\n      }\n      \n      setUser(userData)\n      localStorage.setItem('dating-app-user', JSON.stringify(userData))\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Signup failed')\n      throw err\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const logout = () => {\n    setUser(null)\n    localStorage.removeItem('dating-app-user')\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      login,\n      signup,\n      logout,\n      loading,\n      error\n    }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAsBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,sCAAsC;IACtC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM,YAAY,aAAa,OAAO,CAAC;YACvC,IAAI,WAAW;gBACb,IAAI;oBACF,QAAQ,KAAK,KAAK,CAAC;gBACrB,EAAE,OAAO,GAAG;oBACV,aAAa,UAAU,CAAC;gBAC1B;YACF;QACF;iCAAG,EAAE;IAEL,MAAM,QAAQ,OAAO,OAAe;QAClC,WAAW;QACX,SAAS;QAET,IAAI;YACF,oBAAoB;YACpB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YAEjD,oBAAoB;YACpB,IAAI,CAAC,SAAS,CAAC,UAAU;gBACvB,MAAM,IAAI,MAAM;YAClB;YAEA,IAAI,SAAS,MAAM,GAAG,GAAG;gBACvB,MAAM,IAAI,MAAM;YAClB;YAEA,iBAAiB;YACjB,MAAM,WAAiB;gBACrB,IAAI;gBACJ;gBACA,MAAM,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;gBACzB,KAAK;gBACL,KAAK;gBACL,UAAU;YACZ;YAEA,QAAQ;YACR,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CAAC;QACzD,EAAE,OAAO,KAAK;YACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;YAC9C,MAAM;QACR,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,SAAS,OAAO,OAAe,UAAkB;QACrD,WAAW;QACX,SAAS;QAET,IAAI;YACF,oBAAoB;YACpB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YAEjD,oBAAoB;YACpB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM;gBAChC,MAAM,IAAI,MAAM;YAClB;YAEA,IAAI,SAAS,MAAM,GAAG,GAAG;gBACvB,MAAM,IAAI,MAAM;YAClB;YAEA,iBAAiB;YACjB,MAAM,WAAiB;gBACrB,IAAI,KAAK,GAAG,GAAG,QAAQ;gBACvB;gBACA;gBACA,KAAK;gBACL,KAAK;gBACL,UAAU;YACZ;YAEA,QAAQ;YACR,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CAAC;QACzD,EAAE,OAAO,KAAK;YACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;YAC9C,MAAM;QACR,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,SAAS;QACb,QAAQ;QACR,aAAa,UAAU,CAAC;IAC1B;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAC3B;YACA;YACA;YACA;YACA;YACA;QACF;kBACG;;;;;;AAGP;GA5GgB;KAAA;AA8GT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}